Start test section vessel
-------------------------

>> Start Test J.0 Checking _Section_leaf_node_base {
J.1.0=1 New _Section_leaf_node_base section_leaf_node_base = _Section_leaf_node_base()
J.1.1=1 Verifying default constructor. Checkout whether section_leaf_node_base._next is nullptr: 0 ,expected nullptr; Checkout whether section_leaf_node_base._prev is nullptr: 0 ,expected nullptr;
J.1.2=1 Construct Val by pointers to _Section_leaf_node_base: `_Section_leaf_node_base section_leaf_node_base2(&section_leaf_node_base, &section_leaf_node_base);`
J.1.3=1 Verifying construtor. section_leaf_node_base2._prev: 0x7fffffffe210, exptected 0x7fffffffe210. ._next: 0x7fffffffe210, exptected 0x7fffffffe210
} successed(4/4). Pass test J.1.

>> Start Test J.1 Checking _Section_tree_node_base {
J.2.0=1 New _Section_tree_node_base section_tree_node_base = _Section_tree_node_base()
J.2.1=1 Verifying default constructor. section_tree_node_base._left: 0, expected nullptr. section_tree_node_base._right:0, expected nullptr. section_tree_node_base._parent: 0, expected nullptr.
J.2.2=1 Construct section_tree_node_base2 by pointers to ._Section_tree_node_base: `_Section_tree_node_base section_tree_node_base2(&tb, &tb, &tb);`
J.2.3=1 Verifying consturctor. section_node_base2._parent: 0x7fffffffe210, expected 0x7fffffffe210. ._left: 0x7fffffffe210, expected 0x7fffffffe210. ._right: 0x7fffffffe210, expected: 0x7fffffffe210
} successed(4/4). Pass test J.2.

>> Start Test J.2 Checking _Section_node_header {
J.3.0=1 New _Section_node_header, show its ._parent: 0, ._right: 0x7fffffffe1b0, ._left: 0x7fffffffe1b0
J.3.1=1 Verify section_node_header's ._size: 0, .node_count: 0, both expected 0
J.3.2=1 New _Section_node_header section_node_header2 consturcted by section_node_header.
J.3.3=1 Checkout whether section_node_header2's ._left: 0x7fffffffe1e0, ._right: 0x7fffffffe1e0, this: 0x7fffffffe1e0, expected equal.
J.3.4=1 New _Section_node_header section_node_header4 cannot consturcted by const section_node_header&.
J.3.5=1 New _Section_node_header section_node_header5 connected section_node_header forming a circle.
J.3.6=1 New _Section_node_header section_node_header6 constructed by section_node_header5.
J.3.7=1 Check whether section_node_header and section_node_header6 forms a circle, section_node_header's this: 0x7fffffffe1b0, ._left: 0x7fffffffe240, ._right: 0x7fffffffe240, section_node_header6's this: 0x7fffffffe240, ._left: 0x7fffffffe1b0, ._right: 0x7fffffffe1b0
J.3.8=1 Check whether section_node_header5 is reconstructed by default. section_node_header5' this: 0x7fffffffe210, ._left: 0x7fffffffe210, ._right: 0x7fffffffe210
} successed(9/9). Pass test J.3.

>> Start Test J.3 Checking _Section_leaf_node: {
J.4.0=1 Testing _Section_leaf_node, new _Section_leaf_node.
J.4.1=1 1Test whether successfully default construct inherit from _Section_tree_node_base. leaf_node._parent: 0, expected nullptr. leaf_node._left: 0, expected nullptr. .right: 0, expected nullptr.
J.4.2=1 Test whether successfully default construct inherit from _Section_leaf_node_base. leaf_node._prev: 0, expected nullptr. leaf_node._next: 0, expected nullptr.
J.4.3=1 Test whether ._pair member works.
J.4.4=1 Construct pr2 by leaf_node._valptr(), expected *pair<int, int> type. pr2->first = 100, pr2->second = 101, expected (100, 101).
J.4.5=1 Test whether pr2 isnot const, modify it and now, pr2->first = 200, pr2->second = 201, expected (200, 201).
J.4.6=1 Construct pr3 by static_cast<const ...>(leaf_node)._valptr(), expected pr3 as const pair<int, int>. pr3->first = 200, pr3->second = 201, expected (200, 201).
J.4.7=1 pr3 is const, verifying.
} successed(8/8). Pass test J.4.

>> Start Test J.4 Checking _Section_tree_node {
J.5.0=1 Testing default consturtor: `_Section_tree_node<int, int> section_tree_node;`
J.5.1=1 Testing section_tree_node's ._mid: 0, expected 0. ._right: 0, expected 0
J.5.2=1 Testing section_tree_node's ._has_mid: 0, expected false.
J.5.3=1 Testing section_tree_node's ._Is_leaf: 0, expected false
J.5.4=1 Testing section_tree_node's _sum: 0, expected 0.
J.5.5=1 Testing section_tree_node successfully inherit from _Section_tree_node_base, show its _left: 0, expected nullptr. ._right: 0, exptected nullptr. ._parent: 0, expected nullptr.
} successed(6/6). Pass test J.5.

>> Start Test J.5 Checking section {
J.6.0=1 New section<int, int> sec
J.6.1=1 Checking sec's header.
} successed(2/2). Pass test J.6.

-----------------------
End test section vessel, successed part(6/6)
